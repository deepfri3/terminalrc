#http://netbsd.gw.com/cgi-bin/man-cgi/man?tmux+1+NetBSD-current
#http://tmuxcheatsheet.com/
#https://gist.github.com/MohamedAlaa/2961058
#https://github.com/tmux-plugins/tmux-sensible

# C-b is not acceptable -- Vim uses it
set-option -g prefix C-q
# send the prefix to client inside window
#bind-key -n C-a send-prefix

# pass through a ctrl-a if you press it twice
bind C-q send-prefix

# Start numbering at 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

# open new windows with current path
bind c new-window -c "#{pane_current_path}"

#if run as "tmux attach", can create a session if one des not already exist
#new-session -n $HOST

# Set status bar
set -g status-bg black
set -g status-fg white
set -g status-left ""
set -g status-right "#[fg=green]#H"
set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'

# Split windows (new panes) with current path
unbind % # Remove default binding since we’re replacing
unbind '"' # Remove default binding since we’re replacing
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Join panes:
# Target a pane using the following formats:
# - "mysession:mywindow.mypane" (if in a different session)
# - "mywindow.mypane" (if in the same session).
# - You can also use "mysession:progname" if the program running in that pane is unique.
bind-key C-j command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key S command-prompt -p "send pane to:"  "join-pane -t '%%'"
#bind-key M command-prompt -p "join pane from:"  "join-pane -s -h '%%'"
#bind-key S command-prompt -p "join pane from:"  "join-pane -s -v '%%'"
#bind-key H command-prompt -p "send pane to:"  "join-pane -t -h '%%'"
#bind-key V command-prompt -p "send pane to:"  "join-pane -t -v '%%'"
# The following special tokens are available to indicate particular panes.
#{last} !   The last (previously active) pane
#{next}  +   The next pane by number
#{previous}  -   The previous pane by number
#{top}       The top pane
#{bottom}        The bottom pane
#{left}      The leftmost pane
#{right}     The rightmost pane
#{top-left}      The top-left pane
#{top-right}     The top-right pane
#{bottom-left}       The bottom-left pane
#{bottom-right}      The bottom-right pane
#{up-of}     The pane above the active pane
#{down-of}       The pane below the active pane
#{left-of}       The pane to the left of the active pane
#{right-of}      The pane to the right of the active pane
# The tokens ‘+’ and ‘-’ may be followed by an offset, for example:
# select-window -t:+2

# swap windows:
# Target a window using the following formats:
# - "mysession:mywindow" (if in a different session)
# - "mywindow" (if in the same session).
# - You can also use "mysession:progname" if the program running in that pane is unique.
bind-key W command-prompt -p "swap this window with window:" "swap-window -t '%%'"
# The following special tokens are available to indicate particular windows. Each has a single-character alternative form.
#{start} 	^ 	The lowest-numbered window
#{end} 	$ 	The highest-numbered window
#{last} 	! 	The last (previously current) window
#{next} 	+ 	The next window by number
#{previous} 	- 	The previous window by number

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Allows us to use C-q a <command> to send commands to a TMUX session inside
# another TMUX session
bind-key a send-prefix

# fzf helper
bind-key 0 run "tmux split-window -l 12 'bash -ci ftpane'"
bind-key f run -b ftwind

# lower command delay
set -sg escape-time 1

# start first window and pane at 1, not zero
set -g base-index 1
set -g pane-base-index 1

# renumber windows when windows is closed
set -g renumber-windows on

# bind r to reloading the config file
bind r source-file ~/.tmux.conf \; display "Reloaded tmux config file."

# vim / xmonad style bindings for pane movement
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# vim / xmonad style bindings for window movement
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# shift-movement keys will resize panes
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

bind-key b break-pane -d
bind-key C-j choose-tree

# turn on 256 color support in tmux
#set -ga terminal-overrides ",*:Tc"
#set -ga terminal-overrides "$TERM:Tc"
#set-option -g default-terminal "xterm-256color"
#set-option -g default-terminal "screen-256color"
#set-option -g default-terminal "$TERM"
#https://github.com/tmux/tmux/pull/112

# fiddle with colors of status bar
set -g status-fg white
set -g status-bg colour234

# fiddle with colors of inactive windows
set-window-option -g window-status-style fg=brightblue,bg=colour236

# change color of active window
# set window list colors - red for active and cyan for inactive
set-window-option -g window-status-current-style fg=brightred,bg=colour236

# set color of regular and active panes
set -g pane-border-style fg=colour238,bg=default
set -g pane-active-border-style fg=green,bg=default

# set color of command line
set -g message-style fg=white,bg=colour22

# configure contents of status bar
set -g status-position bottom
set -g status-left-length 40
set -g status-left "#[fg=green]\"#S\" #W(#I):#P | "
set -g status-right-length 60
set -g status-right "#{prefix_highlight} #[fg=green] #h | %d %b %Y | %l:%M %p | #(date -u | awk '{print $4}')"
set -g status-justify left

# window behaviors
setw -g automatic-rename on
setw -g monitor-activity on
set -g visual-activity off
set -g visual-bell off

# Explicity set the tpm manager path
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.tmux/plugins/tpm'

# navigate using vim-style keys
# Note: for tmux yank
set -g @shell_mode 'vi'

# copy/paste using vim-style keys
set-option -g mouse on
setw -g mode-keys vi
set-option -s set-clipboard off
unbind [
bind Escape copy-mode
unbind P
bind P paste-buffer
# Begin selection in copy mode.
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi V send-keys -X rectangle-toggle
# copy to the system clipboard using xclip
unbind -T copy-mode-vi Enter
#bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -se c -i'
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xsel -b -i'
#bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'xclip -se c -i'
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'xsel -b -i'

# buffer
bind Space choose-buffer

# Continuum - Automatic restore
# Last saved environment is automatically restored when tmux is started.
set -g @continuum-restore 'off'
# Tmux is automatically started after the computer/server is turned on.
#set -g @continuum-boot 'on'
# default resurrect dir
set -g @resurrect-dir '~/.tmux/resurrect'

# set up aliases for temporarily maximizing panes
unbind Up
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# List of plugins
# Supports `github_username/repo` or full git repo URLs
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
#set -g @plugin 'jabirali/tmux-tilish' #https://github.com/jabirali/tmux-tilish
#set -g @plugin 'arcticicestudio/nord-tmux' #https://www.nordtheme.com/docs/ports/tmux
# List of plugins
#set -g @tpm_plugins '            \
    #tmux-plugins/tpm             \
    #tmux-plugins/tmux-sensible   \
    #tmux-plugins/tmux-resurrect  \
    #tmux-plugins/tmux-continuum  \
    #tmux-plugins/tmux-prefix-highlight \
    #jabirali/tmux-tilish         \
    #arcticicestudio/nord-tmux    \
#'
# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# Install `tpm` if needed.
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run -b "~/.tmux/plugins/tpm/tpm"

